CREATE TABLE appleStore_description_combined AS

SELECT * FROM appleStore_description1

UNION ALL

SELECT * FROM appleStore_description2

UNION ALL

SELECT * FROM appleStore_description3

UNION ALL

SELECT* FROM appleStore_description4

-- check the number of unique apps in both tablesAppleStore

SELECT COUNT(DISTINCT id) AS UNIQUeAppIDs
FROM AppleStore

SELECT COUNT(DISTINCT id) AS UNIQUeAppIDs
FROM appleStore_description_combined

--check for any missing values in key fields

SELECT COUNT(8) as missingValues
FROM AppleStore
WHERE track_name is NULL OR user_rating IS NULL OR prime_genre IS NULL

SELECT COUNT(8) as missingValues
FROM appleStore_description_combined
WHERE app_desc is NULL

--Find out number of apps per genre
SELECT prime_genre, COUNT(*) AS NumApps
FROM AppleStore
GROUP by prime_genre
ORDER BY NumApps DESC

--Get an overview of the apps' ratings

SELECT	min(user_rating) as MinRating,
		max(user_rating) as MaxRating,
		avg(user_rating) as AvgRating
From AppleStore

**DATA ANALYSIS**

--Determine whether paid apps have higher ratings than free apps

SELECT CASE
			when price > 0 THEN 'Paid'
            Else 'Free'
       END as App_Type,
       avg(user_rating) as Avg_rating
FROM AppleStore
GROUP BY App_Type

--Check if apps with more supported languages have higher ratings

SELECT CASE	
			WHEN lang_num < 10 THEN '10 languages'
            WHEN lang_num BETWEEN 10 and 30 THEN '10-30 languages'
            else '>30 languages'
       END as language_bucket,
       avg(user_rating) as Avg_Rating
FROM AppleStore
GROUP by language_bucket
ORDER by Avg_Rating desc

--Check the genres with low ratings

SELECT	prime_genre,
		avg(user_rating) as Avg_Rating
FROM AppleStore
GROUP by prime_genre
order by Avg_Rating ASC
LIMIT 10

--Check if there is correlation between the legth of the app description and the user rating

SELECT CASE
			WHEN length(b.app_desc) <500 THEN 'Short'
            WHEN length(b.app_desc) BETWEEN 500 and 1000 then 'Medium'
			Else 'Long'
       End as description_length_bucket,
       avg(a.user_rating) as average_rating
FROM
	AppleStore as A
JOIN
	appleStore_description_combined as b
ON
	a.id = b.id 

GROUP by description_length_bucket
ORDER by average_rating DESC

--Check the top-rated apps for each genreAppleStore

SELECT
	prime_genre,
    track_name,
    user_rating
FROM (
SELECT
	prime_genre,
    track_name,
    user_rating,
    RANK( ) OVER(Partition by prime_genre ORDER by user_rating desc, rating_count_tot DESC) as rank
    FROM
    appleStore
   ) as a
WHERE
a.rank = 1